Collections:
map
map is a transformation operation that applies a function to each element of a stream and returns a new stream consisting of the results of applying the function 
to each element.
It transforms each element individually, and the result is a one-to-one mapping between the elements of the original stream and the elements of the resulting stream.
The mapping function passed to map must return a value of the same type or subtype, as it performs a one-to-one transformation.

flatMap
flatMap is a transformation operation similar to map, but it is used when each element of the original stream contains another stream or collection of elements.
It flattens the elements of nested streams or collections into a single stream. Instead of producing a stream of streams or collections, it produces a single 
flat stream.
The mapping function passed to flatMap must return a stream or collection, and it combines the elements of all the streams or collections returned by
the mapping function into a single stream.

reduce
reduce is a terminal operation that combines all elements of a stream into a single result by repeatedly applying a binary operator.
It takes an initial value (also known as the identity) and a binary operator as parameters. The binary operator is applied to each element of the stream 
along with the accumulated result from previous operations.
The result of reduce can be of a different type than the elements of the stream. For example, you can use it to calculate the sum of all elements, 
find the maximum element, concatenate strings, etc.

WeakHashMap:
which allows you to store key-value pairs. It is similar to HashMap, but it uses weak references for its keys, meaning that if a key is not referenced anywhere 
else in the program and is only referenced by the WeakHashMap, it may be garbage collected.

IdentityHashMap:
IdentityHashMap is a specialized implementation of the Map interface that uses reference equality (instead of object equality) when comparing keys. 
This means that it compares keys using the == operator rather than the equals() method.

Fail-Fast Collections
Fail-fast iterators throw a ConcurrentModificationException if the underlying collection is structurally modified after the iterator is created.
These collections are designed to immediately detect and prevent concurrent modifications during iteration.
Examples of fail-fast collections include ArrayList, HashMap, HashSet, etc.

Fail-Safe Collections
Fail-safe iterators do not throw ConcurrentModificationException even if the underlying collection is modified during iteration.
These collections make a copy of the underlying data structure (e.g., array) when the iterator is created, and the iteration is performed on this copied data structure.
Examples of fail-safe collections include ConcurrentHashMap, CopyOnWriteArrayList, CopyOnWriteArraySet, etc.

Fail-Fast Collections: Immediate detection and throwing of ConcurrentModificationException during iteration if the collection is modified.
Fail-Safe Collections: Iteration is performed on a copied data structure, allowing modification during iteration without throwing exceptions.

Comparable Interface
The Comparable interface is used to define the natural ordering of objects.
It contains a single method compareTo() that compares the current object with another object.
Classes that implement Comparable can be sorted using the Collections.sort() method or by calling Arrays.sort().

Comparator Interface
The Comparator interface is used to define custom sorting orders for objects.
It contains a single method compare() that compares two objects.
Comparator instances are often used to sort objects in cases where the class itself does not implement Comparable, or when you want to use multiple sorting 
orders for the same class.

Comparable provides a way to define the natural ordering of objects within the class itself, while Comparator allows for defining custom sorting orders externally,
without modifying the class itself. Both interfaces are widely used for sorting objects in Java collections.

Java 8 Features:
functional interface is an interface that contains only one abstract method. It serves as a blueprint for implementing lambda expressions or method references. 
Functional interfaces enable the use of lambda expressions, which provide a concise way to represent anonymous functions.

Characteristics of Functional Interfaces:
Single Abstract Method (SAM): A functional interface contains exactly one abstract method. It may also contain default methods and static methods introduced
in Java 8, but only one abstract method.

Lambda Expression Compatibility: Functional interfaces are designed to be compatible with lambda expressions, allowing developers to represent instances of 
single-method interfaces with a compact syntax.

@FunctionalInterface Annotation: While not required, it's common practice to annotate functional interfaces with @FunctionalInterface. This annotation ensures
that the interface contains exactly one abstract method, and if it contains more than one abstract method, it will result in a compilation error.

A Predicate is a functional interface that represents a boolean-valued function of one argument
A Function is a functional interface that represents a function that accepts one argument and produces a result.
A Consumer is a functional interface that represents an operation that accepts a single input argument and returns no result.
A Supplier is a functional interface that represents a supplier of results.

Optional is a container object introduced in Java 8 that can hold a value or be empty. It is used to represent optional values and helps avoid null checks, 
making the code more readable and less error-prone.

Optional can be used to handle nullable values more gracefully and avoid NullPointerExceptions in Java.

Date Time API
API is comprehensive and offers many more classes and methods to handle date and time operations effectively.

LocalDate - Represents a date without a time zone (e.g., 2024-06-03).
LocalTime -Represents a time without a time zone (e.g., 14:30:00).
LocalDateTime - Represents a date and time without a time zone (e.g., 2024-06-03T14:30:00)
ZonedDateTime - Represents a date and time with a time zone (e.g., 2024-06-03T14:30:00+02:00[Europe/Paris])
Period: Represents a date-based amount of time (e.g., 3 years, 2 months, 1 day).
Duration: Represents a time-based amount of time (e.g., 5 hours, 30 minutes).

the advantages of using Java Streams:
Streams provide a declarative way to process collections and sequences of data. They support functional programming, lazy evaluation, and parallel processing

 difference between intermediate and terminal operations in Java Streams:
intermediate operations (e.g., filter, map) return a new stream and are lazy, 
while terminal operations (e.g., collect, forEach) produce a result or side-effect and complete the stream pipeline.

What are lambdas and functional interfaces in Java:
Lambdas are anonymous functions that can be used to implement functional interfaces (interfaces with a single abstract method). 
They provide a more concise way to represent instances of single-method interfaces.

Optional class and its use cases:
Optional is a container object used to represent the presence or absence of a value, helping to avoid NullPointerException and providing methods
for conditional retrieval and default values.

How does the reduce operation work in Java Streams:
reduce combines elements of a stream into a single result by applying a binary operator repeatedly.
It can be used for summing, concatenating, or other forms of aggregation.

What are Java Streams?
Java Streams are a sequence of elements that support functional-style operations such as map, filter, reduce, and collect. 
They allow for declarative processing of collections of data.

What are the key characteristics of Java Streams?
Lazy evaluation: Operations are only performed when a terminal operation is invoked.
Pipelining: Operations can be chained to form a pipeline of stream operations.
Automatic parallelization: Streams can leverage parallel execution for improved performance.

Explain the difference between intermediate and terminal operations in Java Streams.
Intermediate operations: Operations like map, filter, sorted, etc., which return a new stream and are lazily evaluated.
Terminal operations: Operations like forEach, collect, reduce, etc., which trigger the execution of the stream pipeline and produce a result or side effect.

How do you create a Stream in Java?
Streams can be created from collections using stream() method or parallelStream() for parallel streams, from arrays using Arrays.stream(array), 
or from static factory methods like Stream.of().

What is the purpose of the map function in Java Streams?
The map function transforms each element in the stream into another object using the provided function. It returns a new stream consisting of the 
transformed elements.

What is the difference between findFirst() and findAny() in Java Streams?
findFirst(): Returns the first element in the stream (or an Optional if the stream is empty).
findAny(): Returns any element in the stream (or an Optional if the stream is empty). This is useful for parallel streams where multiple elements 
can be processed concurrently.

How does Java Streams handle parallelism?
Java Streams API can leverage parallel execution automatically for certain operations using the parallel() or parallelStream() methods. 
It internally uses the Fork/Join framework to split the workload across multiple threads.

Explain the reduce operation in Java Streams.
The reduce operation combines the elements of a stream into a single value. It takes an initial value (or identity) and
a binary operator (a function that takes two operands and produces a result).

Functional Programming Interview Questions:
What is functional programming? How does it differ from imperative programming?
Functional programming: Focuses on defining computations as mathematical functions and avoids changing state and mutable data.
Imperative programming: Focuses on describing steps that change program state and modify data.

What are lambda expressions in Java?
Lambda expressions are anonymous functions that allow you to treat functionality as a method argument or create concise code.

What are functional interfaces in Java?
Functional interfaces are interfaces that contain exactly one abstract method. They can have multiple default or static methods.

Explain the @FunctionalInterface annotation in Java.
The @FunctionalInterface annotation is used to ensure that an interface is a functional interface, meaning it has exactly one abstract method. 
It's optional but provides clarity and prevents accidental addition of more abstract methods.

What are method references in Java?
Method references provide a way to refer to methods or constructors without invoking them. They can be used to provide implementations for
functional interfaces more concisely.

What is immutability in the context of functional programming?
Immutability means that once an object is created, its state cannot change. This prevents unintended side effects and makes programs easier to reason 
about and parallelize.

How does Java support functional programming constructs like Optional, Stream, and Function?
Java provides these constructs in its standard library (java.util) to support functional programming paradigms. Optional helps avoid null pointer exceptions,
Stream facilitates functional-style operations on collections, and Function provides a functional interface for representing a function.

Why is functional programming gaining popularity in Java development?
Functional programming promotes concise and readable code, supports parallelism, reduces the risk of side effects, and aligns well with modern trends 
such as microservices and cloud computing.
